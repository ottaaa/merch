generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// er図生成
// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "../docs/scheme/scheme.md"
//   theme                     = "forest"
//   includeRelationFromFields = true
// }

model User {
  id             Int             @id @default(autoincrement())
  code           String          @unique @db.VarChar(255)
  email          String          @unique @db.VarChar(255)
  name           String
  authentication Authentication?
  sellers        Seller[]
}

model Authentication {
  id             Int    @id @default(autoincrement())
  passwordDigest String @map("password_digest") @db.Char(64)
  user           User   @relation(fields: [userId], references: [id])
  userId         Int    @unique
}

model Shop {
  id      Int      @id @default(autoincrement())
  name    String
  merchs  Merch[]
  sellers Seller[]
  sales   Sale[]
}

model Seller {
  id     Int  @id @default(autoincrement())
  userId Int  @map("user_id")
  shopId Int  @map("shop_id")
  role   Role @default(USER)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
}

model Merch {
  id          Int        @id @default(autoincrement())
  uuid        String     @default(uuid()) @db.Uuid
  name        String
  description String
  image       String
  shopId      Int        @map("shop_id")
  categories  Category[]
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  deletedAt   DateTime   @default(now())
}

model Category {
  id         Int          @id @default(autoincrement())
  category   String       @default("__default")
  price      Int
  stock      Stock[]
  merchId    Int          @map("merch_id")
  merch      Merch        @relation(fields: [merchId], references: [id], onDelete: Cascade)
  SaleDetail SaleDetail[]
}

model Stock {
  id         Int       @id @default(autoincrement())
  quantity   Int
  type       StockType
  createdAt  DateTime  @default(now()) @map("created_at")
  categoryId Int       @map("category_id")
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Sale {
  id          Int          @id @default(autoincrement())
  soldAt      DateTime     @default(now()) @map("sold_at")
  shopId      Int          @map("shop_id")
  SaleDetails SaleDetail[]
  shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model SaleDetail {
  id         Int      @id @default(autoincrement())
  quantity   Int
  categoryId Int      @map("category_id")
  saleId     Int
  category   Category @relation(fields: [categoryId], references: [id])
  sale       Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  OWNER
}

enum StockType {
  SELL
  GIVE
  STOCK_UP
  LOST
}
