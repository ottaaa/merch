generator client {
  provider = "prisma-client-js"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../docs/prisma"
}

// generator prismaClassGenerator {
//   provider      = "prisma-class-generator"
//   dryRun        = false
//   output        = "../../src/_gen/entities"
//   makeIndexFile = false
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../../src/_gen//dtos"
//   outputToNestJsResourceStructure = "true"
//   exportRelationModifierClasses   = "true"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = "Entity"
//   fileNamingStyle                 = "camel"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// er図生成
generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./scheme.md"
  theme                     = "forest"
  includeRelationFromFields = true
}

model User {
  id             Int             @id @default(autoincrement())
  code           String          @unique @db.VarChar(255)
  email          String          @unique @db.VarChar(255)
  name           String
  authentication Authentication?
  sellers        Seller[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Authentication {
  id             Int      @id @default(autoincrement())
  passwordDigest String   @db.Char(64)
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Shop {
  id        Int      @id @default(autoincrement())
  name      String
  merchs    Merch[]
  sellers   Seller[]
  sales     Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seller {
  id        Int      @id @default(autoincrement())
  role      Role     @default(USER)
  userId    Int
  shopId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, shopId])
}

model Merch {
  id             Int          @id @default(autoincrement())
  name           String
  description    String
  price          Int // 税抜価格
  image          String
  isPinning      Boolean      @default(false)
  shopId         Int
  salesTaxRateId Int
  shop           Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
  salesTaxRate   SalesTaxRate @relation(fields: [salesTaxRateId], references: [id])
  categories     Category[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
}

model Category {
  id         Int          @id @default(autoincrement())
  category   String       @default("__default")
  merchId    Int
  merch      Merch        @relation(fields: [merchId], references: [id], onDelete: Cascade)
  stock      Stock[]
  SaleDetail SaleDetail[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
}

model Stock {
  id         Int       @id @default(autoincrement())
  quantity   Int
  type       StockType
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Sale {
  id          Int          @id @default(autoincrement())
  note        String
  soldAt      DateTime     @default(now())
  shopId      Int
  shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
  SaleDetails SaleDetail[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model SaleDetail {
  id             Int          @id @default(autoincrement())
  price          Int // 税込価格
  soldPrice      Int // 実際に売った時の価格
  quantity       Int
  saleId         Int
  categoryId     Int
  salesTaxRateId Int
  sale           Sale         @relation(fields: [saleId], references: [id], onDelete: Cascade)
  category       Category     @relation(fields: [categoryId], references: [id])
  salesTaxRate   SalesTaxRate @relation(fields: [salesTaxRateId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model SalesTaxRate {
  id               Int              @id @default(autoincrement())
  salesTaxCategory SalesTaxCategory
  rate             Decimal
  start            DateTime
  end              DateTime
  Merch            Merch[]
  SaleDetail       SaleDetail[]

  @@unique([salesTaxCategory, start, end])
}

enum Role {
  USER
  OWNER
}

enum StockType {
  SOLD
  GAVE
  STOCKED_UP
  LOST
}

enum SalesTaxCategory {
  REGULAR // 通常税率
  REDUCED // 軽減税率
  FREE // 非課税
}
