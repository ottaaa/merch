generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "./scheme.md"
//   theme                     = "forest"
//   includeRelationFromFields = true
// }

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  name           String
  passwordDigest String   @db.VarChar(64)
  sellers        Seller[]
}

model Shop {
  id      Int      @id @default(autoincrement())
  name    String
  merches Merch[]
  sellers Seller[]
  sales   Sale[]
}

model Seller {
  userId Int
  shopId Int
  role   Role @default(USER)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@id([userId, shopId])
}

model Merch {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  image       String
  shopId      Int
  categories  Category[]
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model Category {
  id       Int    @id @default(autoincrement())
  category String @default("__default")
  price    Int
  stock    Int
  merchId  String @db.Uuid
  merch    Merch  @relation(fields: [merchId], references: [id], onDelete: Cascade)
}

model Sale {
  id          Int          @id @default(autoincrement())
  soldAt      DateTime     @default(now())
  shopId      Int
  SaleDetails SaleDetail[]
  shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
}

model SaleDetail {
  id            Int    @id @default(autoincrement())
  quantity      Int
  merchName     String
  merchCategory String
  merchPrice    Int
  saleId        Int
  sale          Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
  OWNER
}
